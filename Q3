






































*****************************************************************************ColumnTransCipher*********************************************************************
********************************************************************************************************************************************************************
import java.util.Scanner;

public class ColumnTransCipher {

    private static Scanner in;

    private static void encryption(){
        System.out.print("Enter Message: ");
        String msg = in.nextLine();
       
        System.out.print("Enter Keyword: ");
        String keyword = in.nextLine().toUpperCase();

        
        int[] kywrdNumList = keywordNumAssign(keyword);
       
       
        int extraLetters = msg.length() % keyword.length();
       
        int dummyCharacters = keyword.length() - extraLetters;

        if (extraLetters != 0){
            for (int i = 0; i < dummyCharacters; i++) {
                msg += "_";
            }
        }

        int numOfRows = msg.length() / keyword.length();

       
        char[][] arr = new char[numOfRows][keyword.length()];

        int z = 0;
        for (int i = 0; i < numOfRows; i++) {
            for (int j = 0; j < keyword.length(); j++) {
                arr[i][j] = msg.charAt(z);
                z++;
            }

        }

        
        String cipherText = "";
        for(int i=1; i<=keyword.length(); i++){
          
            int column = -1;
            for(int c=0; c<kywrdNumList.length; c++){
                if(kywrdNumList[c] == i){
                    column = c;
                    break;
                }
            }
            
            for (int j = 0; j < numOfRows; j++) {
                cipherText += arr[j][column];
            }
        }

        System.out.println("Cipher Text: " + cipherText);

    }

    private static void decryption(){


        System.out.print("Enter Message: ");
        String msg = in.nextLine();

        System.out.print("Enter Keyword: ");
        String keyword = in.nextLine().toUpperCase();

        int numOfRows = msg.length() / keyword.length();

      
        char[][] arr = new char[numOfRows][keyword.length()];

        int[] kywrdNumList = keywordNumAssign(keyword);

        int index=0;
        for(int i=0; i<kywrdNumList.length; i++){
            
            int colunm = -1;
            for(int c=0; c<kywrdNumList.length; c++){
                if(kywrdNumList[c] == i+1){
                    colunm = c;
                    break;
                }
            }
            
            for (int j = 0; j < numOfRows; j++) {
                arr[j][colunm] = msg.charAt(index++);
            }
        }
       
        String plainText = "";
        for (int i = 0; i < numOfRows; i++) {
            for (int j = 0; j < keyword.length(); j++) {
                plainText += arr[i][j];
            } 
        } 

       
        String finalPlainText="";
        for(int i=0; i<plainText.length(); i++){
            if(plainText.charAt(i) != '_'){
                finalPlainText += plainText.charAt(i);
            }
        }
        System.out.println("Plain Text: " + finalPlainText);

    } 

    private static int[] keywordNumAssign(String keyword) {
        String alpha = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int[] kywrdNumList = new int[keyword.length()];

        int init = 0;
        for (int i = 0; i < alpha.length(); i ++){
            for (int j = 0; j < keyword.length(); j++) {
                if (alpha.charAt(i) == keyword.charAt(j)){
                    init++;
                    kywrdNumList[j] = init;
                }
            } 
        } 
        return kywrdNumList;
    } 

    public static void main(String[] args){
        System.out.println("Columnar Transposition Cipher");
        in = new Scanner(System.in);

        System.out.print("1. Encryption\n2. Decryption\nChoose(1,2): ");
        int choice = in.nextInt();
        in.nextLine();

        if (choice == 1){
            System.out.println("Encryption");
            encryption();

        } else if (choice == 2){
            System.out.println("Decryption");
            decryption();

        } else {
            System.out.println("Invalid Choice");
            System.exit(0);
        }
    } 

} 

*****************************************************************************RailFence*********************************************************************
********************************************************************************************************************************************************************
import java.util.*;

public class RailFence {
	
	
	public static char[][] fillTheMatrixWithChar(int depth, String message, char c) {
		
		char[][] matrix = new char[depth][message.length()];
		
		for(int i = 0; i < depth; i++) {
			for(int j = 0; j < message.length(); j++) {
				matrix[i][j] = c;
			}
		}
		
		return matrix;
	}
	
	
	public static String encrypt(int depth, String message) {
		
		char[][] matrix = fillTheMatrixWithChar(depth, message, '\n');
		

		boolean dirDown = false;
		int row = 0;
		int col = 0;
		
		for(int i = 0; i < message.length(); i++) {
			
			if(row == 0 || row == (depth-1)) {
				dirDown = !dirDown;
			}
			
			matrix[row][col++] = message.charAt(i);
			
			if(dirDown) {
				row++;
			} else {
				row--;
			}
		}
		
		String cipher = "";
		
		for(int i = 0; i < depth; i++) {
			for(int j = 0; j < message.length(); j++) {
				if(matrix[i][j] != '\n') {
					cipher += matrix[i][j];
				}
			}
		}
		
		return cipher;
	}
	
	public static String dcrypt(int depth, String cipher) {
		
		char[][] matrix = fillTheMatrixWithChar(depth, cipher, '\n');
		
	
		boolean dirDown = true;
		int row = 0;
		int col = 0;
		
		for(int i = 0; i < cipher.length(); i++) {
			
			if(row == 0) {
				dirDown = true;
			} 
			if(row == (depth-1)) {
				dirDown = false;
			}
			
			matrix[row][col++] = '*';
			
			if(dirDown) {
				row++;
			} else {
				row--;
			}
		}
		
		
		
		int currentChar = 0;
		for(int i = 0; i < depth; i++) {
			for(int j = 0; j < cipher.length(); j++) {
				if(matrix[i][j] == '*') {
					matrix[i][j] = cipher.charAt(currentChar++);
				}
			}
		}
		

		row = 0;
		col = 0;
		
		String plain = "";
		for(int i = 0; i < cipher.length(); i++) {
			
			if(row == 0) {
				dirDown = true;
			}
			if(row == (depth-1)) {
				dirDown = false;
			}
			
			plain += matrix[row][col++];
			
			if(dirDown) {
				row++;
			} else {
				row--;
			}
			
		}
		
		return plain;
		
		
	}
	
	
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);
		
		System.out.println("Enter message : ");
		String message = sc.nextLine();
		
		System.out.println("Enter depth : ");
		int depth = sc.nextInt();
		
		String cipher = encrypt(depth, message);
		
		System.out.println("Cipher : " + cipher);
		
		String plain = dcrypt(depth, cipher);
		
		System.out.println("Plain : " + plain);
	}
}

*****************************************************************************RSA************************************************************************************
********************************************************************************************************************************************************************




import java.math.*;

public class RSA {
    public static double gcd(double a, double h) {
  
        double temp;
        while (true) {
            temp = a % h;
            if (temp == 0)
                return h;
            a = h;
            h = temp;
        }
    }

    public static void main(String[] args) {
        double p = 2;
        double q = 7;

        double msg = 5 ;

        double n = p * q;


        double phi = (p - 1) * (q - 1);
		double e = 2;
        while (e < phi) {
      
            if (gcd(e, phi) == 1)
                break;
            else
                e++;
        }
        System.out.println("e value = " + e);

        double d = 0;
        for(int i=0;i<=100;i++)
		{
			double x=1+(i*phi);
			if(x%e==0)   
			{
				d=x/e;
				break;
			}
		}
        System.out.println("d value = " + d);
        

        System.out.println("Message data = " + msg);

 
        double c = Math.pow(msg, e);
        c = c % n;
        System.out.println("Encrypted data = " + c);


        double m = Math.pow(c, d);
        m = m % n;
        System.out.println("Original Message Sent = " + m);
    }
}
